let s:xdgcache = get(environ(), 'XDG_CACHE_HOME', $HOME . '/.cache')
let s:xdgconfig = get(environ(), 'XDG_CONFIG_HOME', $HOME . '/.config')
let s:xdgdata = get(environ(), 'XDG_DATA_HOME', $HOME . '/.local/share')

let s:cachedir = s:xdgcache . '/vim'
let s:configdir = s:xdgconfig . '/vim'
let s:datadir = s:xdgdata . '/vim'

let &g:backupdir = s:cachedir . '/backup//'
let &g:directory = s:cachedir . '/swap//'
let &g:undodir = s:cachedir . '/undo//'
let &g:viminfo .= ',n' . s:datadir . '/viminfo'

set runtimepath-=~/.vim
set runtimepath-=~/.vim/after
let &g:runtimepath = join([s:configdir, &g:runtimepath, s:configdir . '/after'], ',')

set packpath-=~/.vim
set packpath-=~/.vim/after
let &g:packpath = join([s:datadir, &g:packpath, s:datadir . '/after'], ',')


let g:session_directory = s:datadir . '/sessions'
let g:session_autoload = 'no'
let g:session_autosave = 'yes'
let g:session_persist_font = 0
let g:session_persist_colors = 0

let g:coc_config_home = s:configdir


filetype plugin indent on
syntax on

set autochdir
set autowrite
set backspace=indent,eol,start
set belloff=all
set diffopt+=hiddenoff,vertical
set hidden
set hlsearch
set guioptions+=d
set guioptions+=k
set guioptions-=t
set guioptions-=T
set laststatus=2
set mouse=a
set nobackup
set nowritebackup
set shiftwidth=4
set shortmess+=c
set showcmd
set signcolumn=yes
set switchbuf=newtab,usetab
set tabstop=4
set updatetime=300
set whichwrap+=<,>,[,]

if has('clipboard')
	set clipboard+=unnamedplus
endif
if has('termguicolors')
	set termguicolors
endif

let g:gtk_nocache = [0x00000000, 0xfc00ffff, 0xf8000001, 0x78000001]


let g:material_theme_style = 'darker'
silent! colorscheme material

if exists('g:material_colorscheme_map')
	let s:ansi_colors = ['black', 'red', 'green', 'yellow', 'blue', 'purple', 'cyan', 'white']
	let s:colors = g:material_colorscheme_map
	let s:ansi_colors = map(s:ansi_colors, 's:colors[v:val].gui')
	let g:terminal_ansi_colors = s:ansi_colors + s:ansi_colors
endif

"let g:gnome_terminal_background = toupper(s:colors['bg'])
"let g:gnome_terminal_foreground = toupper(s:colors['fg'])
"let g:gnome_terminal_palette = map(g:terminal_ansi_colors, 'toupper(v:val)')


let g:lightline = {
\	'colorscheme': 'material_vim',
\	'active': {
\		'left': [
\			['mode', 'paste'],
\			['currentfunction', 'readonly', 'filename', 'modified']
\		],
\		'right': [
\			['lineinfo'],
\			['fileformat', 'fileencoding', 'filetype']
\		]
\	},
\	'inactive': {
\		'right': [
\			['lineinfo'],
\		]
\	},
\	'component': {
\		'currentfunction': '%{get(b:, "coc_current_function", "")}'
\	},
\	'component_visible_condition': {
\		'currentfunction': 'exists("b:coc_current_function")&&b:coc_current_function!=""'
\	}
\}


function! CloseTerminalOnSuccess(job, status)
	if a:status == 0
		let l:channel = job_getchannel(a:job)
		let l:buffer = ch_getbufnr(l:channel, 'out')
		if l:buffer >= 0
			execute 'bdelete' . l:buffer
		endif
	endif
endfunction

function! s:runcmd(...)
	if &modified
		write
	endif
	call term_start(a:000, {'exit_cb': 'CloseTerminalOnSuccess'})
endfunction


let g:tex_flavor = 'latex'

function! s:runlatex()
	call <SID>runcmd('lualatex', '--halt-on-error', @%)
endfunction

function! s:runbibtex()
	call <SID>runcmd('bibtex', expand('%:r'))
endfunction

augroup latex
	autocmd!
	autocmd FileType tex noremap <buffer> <F5> :call <SID>runlatex()<CR>
	autocmd FileType tex inoremap <buffer> <F5> <C-O>:call <SID>runlatex()<CR>
	autocmd FileType bib noremap <buffer> <F5> :call <SID>runbibtex()<CR>
	autocmd FileType bib inoremap <buffer> <F5> <C-O>:call <SID>runbibtex()<CR>
augroup end


inoremap <F7> <Esc>
vnoremap <F7> <Esc>
onoremap <F7> <Esc>
cnoremap <F7> <Esc>
tnoremap <F7> <C-W>N
tnoremap <ScrollWheelDown> <Down><Down><Down>
tnoremap <ScrollWheelUp> <Up><Up><Up>


cabbrev es OpenSession
cabbrev ws SaveSession
cabbrev qs CloseSession
cabbrev rms DeleteSession


function! s:checkbackspace() abort
	let col = col('.') - 1
	return !col || getline('.')[col - 1] =~# '\s'
endfunction

function! s:showdocs()
	if index(['vim', 'help'], &filetype) >= 0
		execute 'help' expand('<cword>')
	else
		call CocAction('doHover')
	endif
endfunction

inoremap <silent><expr> <Tab>
\	pumvisible()? "\<C-n>":
\	<SID>checkbackspace()? "\<Tab>":
\	coc#refresh()
inoremap <expr> <S-Tab> pumvisible()? "\<C-p>": "\<S-Tab>"
inoremap <silent><expr> <C-Space> coc#refresh()
inoremap <expr> <CR> (complete_info()['selected'] != '-1')? "\<C-y>": "\<C-g>u\<CR>"

nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gD <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

nnoremap <silent> K :call <SID>showdocs()<CR>

command QuickFix call CocActionAsync('doQuickfix')
cabbrev qf QuickFix

augroup coc
	autocmd!
	autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
	autocmd User CocStatusChange call lightline#update()
augroup end
